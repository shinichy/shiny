typeof process!="undefined"&&require("amd-loader"),define(["require","exports","module","./lucene","../test/assertions"],function(e,t,n){var r=e("./lucene").Mode,i=e("../test/assertions");n.exports={name:"Lucene Tokenizer",setUp:function(){this.tokenizer=(new r).getTokenizer()},"test: recognises AND as keyword":function(){var e=this.tokenizer.getLineTokens("AND","start").tokens;i.equal("keyword.operator",e[0].type)},"test: recognises OR as keyword":function(){var e=this.tokenizer.getLineTokens("OR","start").tokens;i.equal("keyword.operator",e[0].type)},"test: recognises NOT as keyword":function(){var e=this.tokenizer.getLineTokens("NOT","start").tokens;i.equal("keyword.operator",e[0].type)},'test: recognises "hello this is dog" as string':function(){var e=this.tokenizer.getLineTokens('"hello this is dog"',"start").tokens;i.equal("string",e[0].type)},'test: recognises -"hello this is dog" as negation with string':function(){var e=this.tokenizer.getLineTokens('-"hello this is dog"',"start").tokens;i.equal("constant.character.negation",e[0].type),i.equal("string",e[1].type)},"test: recognises ~100 as text with proximity":function(){var e=this.tokenizer.getLineTokens("~100","start").tokens;i.equal("constant.character.proximity",e[0].type)},'test: recognises "hello this is dog"~100 as string with proximity':function(){var e=this.tokenizer.getLineTokens('"hello this is dog"~100',"start").tokens;i.equal("string",e[0].type),i.equal("constant.character.proximity",e[1].type)},'test: recognises raw:"hello this is dog" as keyword':function(){var e=this.tokenizer.getLineTokens('raw:"hello this is dog"',"start").tokens;i.equal("keyword",e[0].type)},'test: recognises raw:foo as"keyword':function(){var e=this.tokenizer.getLineTokens("raw:foo","start").tokens;i.equal("keyword",e[0].type)},'test: recognises "(" as opening parenthesis':function(){var e=this.tokenizer.getLineTokens("(","start").tokens;i.equal("paren.lparen",e[0].type)},'test: recognises ")" as closing parenthesis':function(){var e=this.tokenizer.getLineTokens(")","start").tokens;i.equal("paren.rparen",e[0].type)},"test: recognises foo* as text with asterisk":function(){var e=this.tokenizer.getLineTokens("foo*","start").tokens;i.equal("text",e[0].type),i.equal("constant.character.asterisk",e[1].type)},"test: recognises foo? as text with interro":function(){var e=this.tokenizer.getLineTokens("foo?","start").tokens;i.equal("text",e[0].type),i.equal("constant.character.interro",e[1].type)},"test: recognises single word as text":function(){var e=this.tokenizer.getLineTokens(" foo","start").tokens;i.equal("text",e[0].type)}}}),typeof module!="undefined"&&module===require.main&&require("asyncjs").test.testcase(module.exports).exec();